import * as params from '@params';

function getSelectValueFromText(text) {
    const options = document.getElementById('distro-select');

    for (let i = 0; i < options.length; i++) {
        if (options[i].text === text) {
            return options[i].value;
        }
    }
    return null; // If the text is not found
}

function calculateBaseImage(distroInfo) {
    let baseImage = distroInfo[1] + ':' + distroInfo[2];

    if (distroInfo[1] == 'opensuse') {
        baseImage = distroInfo[1] + '/' + distroInfo[2].replace('-', ':');
    } 

    return baseImage;
}

function replaceContent(distroInfo) {
    let newDistroInfo = distroInfo;
    const metaDistroElements = document.querySelectorAll('.meta-distro');
    const metaDistroInlineElements = document.querySelectorAll('.meta-distro-inline');
    let onlyDistros = [];

    const familyRegex = new RegExp(/\$\$family/, 'gi');
    const flavorRegex = new RegExp(/\$\$flavor/, 'gi');
    const flavorReleaseRegex = new RegExp(/\$\$flavorRelease/, 'gi');
    const baseImageRegex = new RegExp(/\$\$baseImage/, 'gi');

    metaDistroElements.forEach(metaDistro => {
        // Extract the class list
        const classList = metaDistro.className.split(' ');

        // Find the class that starts with "only-flavors="
        const flavorClass = classList.find(cls => cls.startsWith('only-flavors='));

        if (flavorClass) {
            // Extract the values part of the class
            const values = flavorClass.split('=')[1];
            console.log(values)
            const isList = values.includes(',');
            if (isList) {
                onlyDistros = values.split(',');
            } else {
                onlyDistros = [values];
            }
            console.log(onlyDistros )
        }

        const distroInfoName = distroInfo[1].charAt(0).toUpperCase() + distroInfo[1].slice(1).toLowerCase() + '+' + distroInfo[2];

        if (onlyDistros.length > 0 && !onlyDistros.includes(distroInfoName)) {
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-warning autogenerated';
            alertDiv.setAttribute('role', 'alert');

            const alertHeading = document.createElement('h4');
            alertHeading.className = 'alert-heading';
            alertHeading.textContent = 'Flavor Incompatibility';

            const alertText = document.createElement('p');
            
            alertText.innerHTML = 'Your selected flavor is not compatible with this feature, the only available flavors for this feature are: ' + onlyDistros.join(', ').replace(/\+/g, ' ');

            // Append the heading and text to the alert div
            alertDiv.appendChild(alertHeading);
            alertDiv.appendChild(alertText);

            // Insert the new alert div above the meta-distro element
            metaDistro.parentNode.insertBefore(alertDiv, metaDistro);

            const availableDistro = getSelectValueFromText(onlyDistros[0].replace(/\+/g, ' '));
            newDistroInfo = availableDistro.split(';');
        }

        const preTags = metaDistro.querySelectorAll('pre');
        const aTags = metaDistro.querySelectorAll('a');

        const elements = [...preTags, ...aTags];
        elements.forEach(e => {
            e.textContent = e.dataset.originalContent.replace(familyRegex, newDistroInfo[0])
                                                     .replace(flavorReleaseRegex, newDistroInfo[2])
                                                     .replace(flavorRegex, newDistroInfo[1])
                                                     .replace(baseImageRegex, calculateBaseImage(newDistroInfo));
        });
        aTags.forEach(a => {
            a.href = a.dataset.originalHref.replace(familyRegex, newDistroInfo[0])
                                           .replace(flavorReleaseRegex, newDistroInfo[2])
                                           .replace(flavorRegex, newDistroInfo[1])
                                           .replace(baseImageRegex, calculateBaseImage(newDistroInfo));

        });
    });

    metaDistroInlineElements.forEach(e => {
        e.textContent = e.dataset.originalContent.replace(familyRegex, newDistroInfo[0])
                                                    .replace(flavorReleaseRegex, newDistroInfo[2])
                                                    .replace(flavorRegex, newDistroInfo[1])
                                                    .replace(baseImageRegex, calculateBaseImage(newDistroInfo));
    });
}

document.addEventListener('DOMContentLoaded', () => {
    const distroSelect = document.getElementById('distro-select');
    let distroInfo = [params.defaultFamily, params.defaultFlavor, params.defaultFlavorRelease];
    const metaElements = document.querySelectorAll('.meta-distro');
    const inlineMetaElements = document.querySelectorAll('.meta-distro-inline');
    inlineMetaElements.forEach(e => {
        e.dataset.originalContent = e.textContent;
    });

    metaElements.forEach(metaElement => {
        const preElements = metaElement.querySelectorAll('pre');
        const aElements = metaElement.querySelectorAll('a');
        const elements = [...preElements, ...aElements];
        elements.forEach((e, i) => {
            e.dataset.originalContent = e.textContent;
        });
        aElements.forEach(a => {
            a.dataset.originalHref = a.href;
        });
    });

    const savedDistro = localStorage.getItem('selectedDistro');
    if (savedDistro) {
        if (distroSelect) {
            distroSelect.value = savedDistro;
        }
        distroInfo = savedDistro.split(';');
    } else {
        if (distroSelect) {
            const defaultDistro = distroInfo.join(';');
            distroSelect.value = defaultDistro;
        }
    }

    const generatedAlertElements = document.querySelectorAll('.alert-warning.autogenerated');
    generatedAlertElements.forEach(alert => {
        alert.remove();
    });

    replaceContent(distroInfo);

    if (distroSelect) {
        distroSelect.addEventListener('change', () => {
            const generatedAlertElements = document.querySelectorAll('.alert-warning.autogenerated');
            generatedAlertElements.forEach(alert => {
                alert.remove();
            });
            const selectedDistro = distroSelect.value;
            localStorage.setItem('selectedDistro', selectedDistro);
            replaceContent(selectedDistro.split(';'));
        });
    }
});